// SPDX-FileCopyrightText: 2020 Alvar Penning
//
// SPDX-License-Identifier: GPL-3.0-or-later

package bpv7

import (
	"bytes"
	"testing"
)

// Fix bugs found by go-fuzz, compare ./bundle_parse_fuzz.go

func TestBundleParseCboringMakeSliceLenOutOfRange(t *testing.T) {
	// The problem lay in the cboring library, which allowed the allocation of byte arrays of any size. The fix
	// introduced in cboring v0.1.5 corrects this possible resource exhaustion attack.
	payloads := [][]byte{
		{0x9f, 0x8b, 0x07, 0x07, 0x0f, 0x82, 0x07, 0x7b, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30},
		{0x9f, 0x89, 0x07, 0x07, 0x00, 0x82, 0x07, 0x30, 0x82, 0x07, 0x30, 0x82, 0x07, 0x30, 0x82, 0x07,
			0x07, 0x07, 0x5b, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30},
	}

	for _, payload := range payloads {
		_, _ = ParseBundle(bytes.NewBuffer(payload))
	}
}

func TestBundleParseEndpointIDIPNInterfaceConversion(t *testing.T) {
	payloads := [][]byte{
		{0x9f, 0x89, 0x07, 0x11, 0x00, 0x82, 0x07, 0x30, 0x82, 0x02,
			0x00, 0x82, 0x07, 0x30, 0x82, 0x07, 0x07, 0x07, 0x40, 0xff},
		{0x9f, 0x89, 0x07, 0x11, 0x00, 0x82, 0x07, 0x30, 0x82, 0x02,
			0x30, 0x82, 0x07, 0x30, 0x82, 0x07, 0x07, 0x07, 0x40, 0xff},
	}

	for _, payload := range payloads {
		_, _ = ParseBundle(bytes.NewReader(payload))
	}
}
